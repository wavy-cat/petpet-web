---
import "../styles/global.css";
import Header from "../components/header/Header.astro";
import Footer from "../components/footer/Footer.astro";
import { Toaster } from "../components/ui/sonner.tsx";
import {links} from "./links.ts";

interface Props {
    title: string;
    description?: string;
}

const { title, description } = Astro.props as Props;
---

<html lang="en" class="w-full h-full">
    <head>
        <meta charset="utf-8" />
		<link rel="icon" type="image/vnd.microsoft.icon" href="/favicon.ico" />
        <link rel="sitemap" href="/sitemap-index.xml" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <meta property="og:title" content={title} />
        {
            description !== undefined && (
                <meta property="og:description" content={description} />
            )
        }
        <meta property="og:image" content="/preview.gif" />
        <meta property="og:url" content="https://pet.wavycat.ru/" />
        <meta property="og:type" content="website" />
    </head>
    <body class="w-full h-full">
        <div class="h-full flex justify-center">
            <section class="flex flex-col justify-center gap-2">
                <Header links={links} slim={true} />
                <slot />
                <Footer />
            </section>
        </div>
        <Toaster client:only="react" />
    </body>
</html>

<script is:inline>
    const getThemePreference = () => {
        if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
        ) {
            return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
        });
    }
</script>
