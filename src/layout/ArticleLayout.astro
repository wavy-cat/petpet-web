---
import "../styles/global.css";
import Header from "../components/header/Header.astro";
import {links} from "./links.ts";

interface Props {
	content: {
		title: string,
		description: string
	}
}

const {title, description} = (Astro.props as Props).content;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/vnd.microsoft.icon" href="/favicon.ico" />
		<link rel="sitemap" href="/sitemap-index.xml" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta property="og:title" content={title} />
		{
            description !== undefined && (
                <meta property="og:description" content={description} />
                <meta name="description" content={description}>
            )
        }
		{Astro.site && <meta property="og:url" content={`https://${Astro.site?.host}/`} />}
		<meta property="og:type" content="website" />
	</head>
	<body>
		<Header links={links} />
		<div class="container mx-auto p-6 pt-2">
			<div class="prose dark:prose-invert max-w-none">
				<slot />
			</div>
		</div>
	</body>
</html>

<style>
	h1 {
		font-size: revert;
		font-weight: revert;
	}
</style>

<script is:inline>
	const getThemePreference = () => {
		if (
			typeof localStorage !== "undefined" &&
			localStorage.getItem("theme")
		) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("dark");

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>
